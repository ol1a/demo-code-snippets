import { expect } from 'chai';
import { ethers } from 'hardhat';
import { Vault } from '../typechain-types';
import { BytesLike } from 'ethers';

describe('Lock', function () {
  let vault: Vault;

  async function deploy() {
    const VaultFactory = await ethers.getContractFactory('Vault');
    const initialPassword: BytesLike =
      ethers.utils.formatBytes32String('LunaTheCat');
    vault = await VaultFactory.deploy(initialPassword);
  }

  before(deploy);

  it('Vault should be locked', async () => {
    expect(await vault.locked()).to.be.true;
  });

  it('should read the password from the Vault private storage and unlock the Vault', async () => {
    const storagePassword = await ethers.provider.getStorageAt(
      vault.address,
      1,
    );
    const unlockTx = await vault.unlock(storagePassword);
    await unlockTx.wait();
  });

  it('Vault should be unlocked', async () => {
    expect(await vault.locked()).to.be.false;
  });
});
